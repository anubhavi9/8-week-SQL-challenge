--1. What is the total amount each customer spent at the restaurant?
SELECT S.CUSTOMER_ID, SUM(PRICE) 
FROM SALES S
LEFT JOIN MEMBERS M USING(CUSTOMER_ID)
LEFT JOIN MENU USING (PRODUCT_ID)
GROUP BY S.CUSTOMER_ID;

--2. How many days has each customer visited the restaurant?
SELECT CUSTOMER_ID, COUNT(DISTINCT ORDER_DATE) FROM SALES
GROUP BY CUSTOMER_ID
ORDER BY CUSTOMER_ID

--3. What was the first item from the menu purchased by each customer?
SELECT ORDER_DATE, CUSTOMER_ID, PRODUCT_NAME FROM MENU
JOIN SALES S USING(PRODUCT_ID)
WHERE ORDER_DATE IN (SELECT MIN(ORDER_DATE) FROM SALES GROUP BY CUSTOMER_ID)
GROUP BY ORDER_DATE, CUSTOMER_ID, PRODUCT_NAME
ORDER BY CUSTOMER_ID
					
--4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT PRODUCT_NAME, COUNT(PRODUCT_NAME)
FROM MENU JOIN SALES S USING(PRODUCT_ID)
GROUP BY PRODUCT_NAME
ORDER BY COUNT(*) DESC LIMIT 1

--5. Which item was the most popular for each customer?
SELECT CUSTOMER_ID, PRODUCT_NAME
FROM (SELECT CUSTOMER_ID, PRODUCT_NAME, RANK() OVER(PARTITION BY CUSTOMER_ID ORDER BY COUNT(PRODUCT_NAME) DESC) RNK
FROM MENU JOIN SALES S USING(PRODUCT_ID)
GROUP BY CUSTOMER_ID, PRODUCT_NAME) A
WHERE RNK = 1

--6. Which item was purchased first by the customer after they became a member?
SELECT CUSTOMER_ID, PRODUCT_NAME, ORDER_DATE, JOIN_DATE
FROM (SELECT S.CUSTOMER_ID, PRODUCT_NAME, ORDER_DATE, JOIN_DATE,
ROW_NUMBER() OVER(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE) RN
FROM SALES S 
JOIN MEMBERS M USING(CUSTOMER_ID)
JOIN MENU USING (PRODUCT_ID)
WHERE ORDER_DATE >= JOIN_DATE) A
WHERE RN = 1

--7. Which item was purchased just before the customer became a member?
SELECT CUSTOMER_ID, PRODUCT_NAME, ORDER_DATE, JOIN_DATE
FROM (SELECT S.CUSTOMER_ID, PRODUCT_NAME, ORDER_DATE, JOIN_DATE,
RANK() OVER(PARTITION BY CUSTOMER_ID ORDER BY ORDER_DATE DESC) RN
FROM SALES S 
JOIN MEMBERS M USING(CUSTOMER_ID)
JOIN MENU USING (PRODUCT_ID)
WHERE ORDER_DATE < JOIN_DATE) A
WHERE RN = 1

--8. What is the total items and amount spent for each member before they became a member?
SELECT S.CUSTOMER_ID, COUNT(ORDER_DATE) ITEMS, SUM(PRICE) AMOUNT
FROM SALES S JOIN MEMBERS M USING(CUSTOMER_ID)
JOIN MENU USING (PRODUCT_ID)
WHERE ORDER_DATE < JOIN_DATE
GROUP BY S.CUSTOMER_ID

--9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT S.CUSTOMER_ID, 
SUM(CASE PRODUCT_NAME WHEN 'sushi' THEN PRICE*20 ELSE PRICE*10 END) AS POINTS
FROM SALES S JOIN MENU USING (PRODUCT_ID)
GROUP BY S.CUSTOMER_ID

--10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
SELECT S.CUSTOMER_ID,
SUM(CASE 
WHEN PRODUCT_NAME = 'sushi' THEN PRICE*20
WHEN ORDER_DATE BETWEEN JOIN_DATE AND JOIN_DATE + 6 THEN PRICE*20
ELSE PRICE*10 
END) AS POINTS
FROM SALES S JOIN MEMBERS M USING(CUSTOMER_ID) JOIN MENU USING (PRODUCT_ID)
WHERE EXTRACT(MONTH FROM ORDER_DATE) = 1
GROUP BY S.CUSTOMER_ID
ORDER BY S.CUSTOMER_ID

--BONUS
--1. Join All The Things
SELECT S.CUSTOMER_ID, ORDER_DATE, PRODUCT_NAME, PRICE,
CASE WHEN ORDER_DATE >= JOIN_DATE THEN 'Y' ELSE 'N' END AS MEMBER
FROM SALES S 
LEFT JOIN MEMBERS M USING(CUSTOMER_ID)
JOIN MENU USING (PRODUCT_ID)
ORDER BY S.CUSTOMER_ID, ORDER_DATE

--2. Rank All The Things
SELECT *,
CASE WHEN (ORDER_DATE >= JOIN_DATE) 
THEN RANK() OVER(PARTITION BY CUSTOMER_ID, MEMBER ORDER BY PRODUCT_NAME, ORDER_DATE)
ELSE NULL END AS RANKING FROM (
SELECT S.CUSTOMER_ID, ORDER_DATE, JOIN_DATE, PRODUCT_NAME, PRICE,
CASE WHEN ORDER_DATE >= JOIN_DATE THEN 'Y' ELSE 'N' END AS MEMBER
FROM SALES S LEFT JOIN MEMBERS M USING(CUSTOMER_ID)
JOIN MENU USING (PRODUCT_ID)
ORDER BY S.CUSTOMER_ID, ORDER_DATE) A