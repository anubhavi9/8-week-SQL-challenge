Customising CUSTOMER_ORDERS table (contains duplicate rows as well):

``` REMOVING DUPLICATES || new table --> NEW_CUST ```

>>> CREATE TABLE NEW_CUST AS (SELECT * FROM 
(SELECT *, ROW_NUMBER() OVER(PARTITION BY ORDER_ID, PIZZA_ID, EXCLUSIONS ORDER BY CUSTOMER_ID) RN
FROM CUSTOMER_ORDERS) A
WHERE RN = 1)

>>> ALTER TABLE NEW_CUST DROP COLUMN RN
>>> DROP table CUSTOMER_ORDERS

``` EXCLUSIONS COLUMN ```
>>> UPDATE NEW_CUST SET EXCLUSIONS = CASE EXCLUSIONS
WHEN '' THEN NULL
WHEN 'null' THEN NULL
ELSE EXCLUSIONS END

``` EXTRAS COLUMN ```
>>> UPDATE NEW_CUST SET EXTRAS = CASE EXTRAS
WHEN '' THEN NULL
WHEN 'null' THEN NULL
ELSE EXTRAS END


``` CREATING A NEW TABLE WITH NO CSV(alues) ``` 


1. Creating two CTEs to separate EXTRAS and EXCLUSIONS column using NEW_CUST
-- WITH 
-- CTE AS (SELECT ORDER_ID, UNNEST(string_to_array(EXTRAS, ',')) AS EXTRA FROM NEW_CUST),
-- CTE2 AS (SELECT ORDER_ID, UNNEST(string_to_array(EXCLUSIONS, ',')) AS EXCLUDE FROM NEW_CUST)


2. Creating new table CUST_ORDERS which only has these new values merged with the common from NEW_CUST table [using FULL OUTER JOIN]
>>> CREATE TABLE CUST_ORDERS AS (
SELECT * FROM NEW_CUST CO 
FULL OUTER JOIN (SELECT ORDER_ID, UNNEST(string_to_array(EXTRAS, ',')) AS EXTRA FROM NEW_CUST) A USING(ORDER_ID) 
FULL OUTER JOIN (SELECT ORDER_ID, UNNEST(string_to_array(EXCLUSIONS, ',')) AS EXCLUDE FROM NEW_CUST) B USING(ORDER_ID))


3. Dropping the EXTRAS and EXCLUSIONS columns from CUST_ORDERS
>>> ALTER TABLE CUST_ORDERS DROP COLUMN EXCLUSIONS
>>> ALTER TABLE CUST_ORDERS DROP COLUMN EXTRAS


4. Creating the final table named ``CUSTOMER_ORDERS`` (as the original) which has 16 DISTINCT rows with unique values (no CSVs)
>>> CREATE TABLE CUSTOMER_ORDERS AS (SELECT DISTINCT * FROM CUST_ORDERS ORDER BY ORDER_ID)


5. VOILA! Data Cleaned!!!
``SELECT * FROM CUSTOMER_ORDERS``
